---
description: 
globs: 
alwaysApply: false
---
# AI侦探推理游戏 - 项目核心规则

## 项目概述
这是一个AI驱动的侦探推理游戏，采用现代Web技术栈构建，支持PC和移动端双平台。项目完全使用Cursor AI开发完成，展示了AI辅助开发的强大潜力。

### 技术栈
- **后端**: Python + FastAPI + MySQL
- **前端**: 原生HTML/CSS/JavaScript (无框架)
- **AI服务**: OpenAI兼容API
- **部署**: Docker + Docker Compose

## 项目架构

### 后端服务 (FastAPI)
```
backend/                    # 后端服务包
├── __init__.py            # 包初始化文件（必需）
├── app.py                 # FastAPI主应用 - 项目入口点
├── game_engine.py         # 游戏引擎核心逻辑
├── ai_service.py          # AI服务接口封装
├── models.py              # 数据模型定义
├── case_data.py           # 案例数据管理
├── evidence_system.py     # 证据系统
├── accusation_system.py   # 指控系统
├── game_recorder.py       # 游戏记录系统
├── statistics_service.py  # 统计服务
├── admin_auth.py          # 管理员认证
├── config.py              # 配置管理
├── version.py             # 版本管理
├── database.py            # 数据库操作
└── routes/                # API路由模块
    ├── __init__.py
    ├── game.py            # 游戏相关API
    ├── admin.py           # 管理员API
    ├── history.py         # 历史记录API
    ├── websocket.py       # WebSocket连接
    └── common.py          # 通用API
```

### 前端应用 (原生JavaScript)
```
frontend/                   # 前端界面
├── desktop.html           # PC桌面版界面
├── mobile.html            # 移动端界面
├── admin_dashboard.html   # 管理员仪表板
├── admin_history.html     # 管理员历史记录
├── admin_login.html       # 管理员登录
├── replay.html            # 游戏回放界面
└── static/                # 静态资源
    ├── css/               # 平台独立样式文件
    │   ├── desktop.css    # 桌面端完整独立样式
    │   └── mobile.css     # 移动端完整独立样式
    ├── js/                # JavaScript文件
    │   ├── desktop.js     # 桌面端主应用类
    │   ├── mobile.js      # 移动端主应用类
    │   ├── utils.js       # 通用工具类库
    │   ├── theme-manager.js # 主题管理系统
    │   └── theme-selector.js # 主题选择器组件
    └── themes.json        # 主题配置文件
```

### 部署和工具
```
docker/                    # Docker部署配置
├── Dockerfile            # Docker镜像构建
├── docker-compose.yml    # Docker Compose配置
├── deploy.sh             # Linux/macOS部署脚本
├── deploy.bat            # Windows部署脚本
└── mysql/                # MySQL配置
    └── init.sql          # 数据库初始化脚本

tools/                     # 开发工具
├── setup_database.py     # 数据库设置工具
└── update_version.py     # 版本更新工具

docs/                      # 项目文档
├── DEVELOPER_GUIDE.md     # 开发者指南
├── API_DOCUMENTATION.md  # API文档
└── AI侦探游戏案件创作指南.md # 案件创作指南
```

## 游戏核心机制

### 游戏流程
1. **案例选择** (case-selection) → 玩家从可用案例中选择开始调查
2. **案例介绍** (case-introduction) → 展示案例背景和角色信息
3. **调查阶段** (investigation) → 与不同角色进行AI驱动的对话
4. **指控阶段** (accusation) → 选择嫌疑人并提供推理过程
5. **审判阶段** (trial) → AI角色进行辩护和投票
6. **评价阶段** (evaluation) → 评分和反馈

### 核心组件
- **DetectiveGameApp类**: 前端主应用类，管理游戏状态和UI交互
- **GameEngine类**: 后端游戏引擎，处理游戏逻辑
- **AIService类**: AI服务封装，处理与AI模型的交互
- **EvidenceSystem类**: 证据系统，管理证据的发现和关联
- **AccusationSystem类**: 指控系统，处理指控和审判逻辑

### 数据模型
```python
class Case:
    """案例模型"""
    title: str              # 案例标题
    description: str        # 案例描述
    victim: Character       # 受害者
    characters: List[Character]  # 角色列表
    evidence: List[Evidence]     # 证据列表
    difficulty: str         # easy, medium, hard
    category: str          # murder, theft, fraud

class Character:
    """角色模型"""
    name: str              # 角色名称
    occupation: str        # 职业
    personality: str       # 性格特点
    background: str        # 背景信息
    type: str             # victim, suspect, witness
    is_guilty: bool       # 是否为真凶

class Evidence:
    """证据模型"""
    name: str             # 证据名称
    description: str      # 证据描述
    discovery_conditions: List[str]  # 发现条件
    importance: str       # low, medium, high, critical
    type: str            # physical, testimony, document
```

## API架构

### 核心API端点
- `GET /api/cases` - 获取可用案例列表
- `POST /api/game/start` - 开始新游戏会话
- `POST /api/game/question` - 向角色提问（标准响应）
- `POST /api/game/question-stream` - 向角色提问（流式响应）
- `POST /api/game/hint` - 获取游戏提示
- `POST /api/game/accusation` - 进行指控（标准响应）
- `POST /api/game/accusation-stream` - 进行指控（流式响应）
- `WebSocket /ws/{session_id}` - 实时通信和状态同步

### 统一响应格式
```json
{
    "success": true|false,
    "data": {...},
    "error": "错误消息",
    "error_code": "错误代码"
}
```

## 开发规范

### 模块导入规则
- 后端模块间使用相对导入：`from .module_name import ClassName`
- 启动脚本使用绝对导入：`from backend.module_name import ClassName`
- 所有后端代码在backend包中，确保`__init__.py`存在

### 命名约定
- Python: 蛇形命名法 (snake_case)
- JavaScript: 驼峰命名法 (camelCase)
- CSS: BEM命名规范或语义化类名

### 错误处理
- 统一的错误响应格式
- 前端异步操作使用try-catch包装
- 后端全局异常处理器

## AI交互机制

### 角色AI响应生成
```python
async def get_character_response(character: Character, question: str, context: Dict) -> str:
    """
    生成角色AI响应
    - 基础角色设定：性格、背景、与受害者关系
    - 案例背景：案例描述、受害者信息
    - 对话历史：之前的对话记录
    - 行为指导：保持一致性，不主动透露所有信息
    """
```

### 证据发现机制
```python
async def try_reveal_evidence(character: Character, question: str, case: Case) -> Optional[Evidence]:
    """
    通过对话智能揭露证据
    - 关键词匹配：检查问题是否包含证据发现条件
    - AI智能判断：评估问题的巧妙程度和相关性
    - 角色知识：验证角色是否有理由知道该证据
    """
```

### 评分系统
```python
def calculate_final_score(is_correct: bool, rounds_used: int, evidence_found: int, hints_used: int, reasoning_quality: float) -> int:
    """
    综合评分算法
    - 基础分：指控正确性
    - 效率加分：回合数越少越好
    - 证据加分：发现证据的比例
    - 提示扣分：使用提示的次数
    - 推理加分：推理质量评估
    """
```

## 重要文件说明

### 核心文件
- [backend/app.py](mdc:backend/app.py): FastAPI主应用，包含路由配置和中间件
- [backend/game_engine.py](mdc:backend/game_engine.py): 游戏核心逻辑
- [frontend/static/js/desktop.js](mdc:frontend/static/js/desktop.js): 前端主应用类
- [start_game.py](mdc:start_game.py): 游戏启动脚本

### 配置文件
- [env.template](mdc:env.template): 环境变量模板
- [requirements.txt](mdc:requirements.txt): Python依赖包
- [docker/docker-compose.yml](mdc:docker/docker-compose.yml): Docker部署配置

### 文档
- [docs/DEVELOPER_GUIDE.md](mdc:docs/DEVELOPER_GUIDE.md): 详细开发指南
- [README.md](mdc:README.md): 项目说明文档

## 最新重构成果

### AccusationSystem重构
[backend/accusation_system.py](mdc:backend/accusation_system.py)经过重大重构，提升了代码质量和可维护性：

**函数职责分离**：
- `_build_conversation_context()` - 构建角色对话上下文（可复用）
- `_build_testimonies_context()` - 构建证词上下文
- `_build_evidence_context()` - 构建证据上下文
- `add_vote_to_accusation()` - 解析投票结果并更新Accusation对象
- `finalize_accusation_verdict()` - 完成指控的最终判决

**对象封装优化**：
- 使用`Accusation`对象封装指控相关的所有数据
- 简化函数参数，从6个参数减少到4个参数
- 提高类型安全性和代码可读性

### 版本管理
- 版本号格式：主版本.次版本.修订版本 (例如: 1.6.0)
- 使用 [tools/update_version.py](mdc:tools/update_version.py) 管理版本
- 版本信息存储在 [backend/version.py](mdc:backend/version.py) 中



