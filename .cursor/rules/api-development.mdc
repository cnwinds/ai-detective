---
description:
globs:
alwaysApply: false
---
# API开发规则

## API架构概览

### 主要端点
- **健康检查**: `GET /api/health` - 服务器状态检查
- **案例管理**: `GET /api/cases` - 获取可用案例列表
- **分类信息**: `GET /api/categories` - 获取案例分类和难度
- **游戏会话**: `POST /api/game/start` - 开始新游戏会话
- **游戏状态**: `GET /api/game/{session_id}/state` - 获取游戏状态
- **角色对话**: `POST /api/game/question` - 标准对话接口
- **流式对话**: `POST /api/game/question/stream` - 流式对话接口
- **游戏提示**: `POST /api/game/hint` - 获取游戏提示
- **玩家指控**: `POST /api/game/accusation` - 标准指控接口
- **流式指控**: `POST /api/game/accusation/stream` - 流式指控接口
- **会话管理**: `DELETE /api/game/{session_id}` - 结束游戏会话

### WebSocket端点
- **实时通信**: `WebSocket /ws/{session_id}` - 实时游戏状态同步

## 数据模型规范

### 请求模型 (定义在 [backend/models.py](mdc:backend/models.py))
- `StartGameRequest` - 游戏开始请求
- `QuestionRequest` - 角色提问请求
- `AccusationRequest` - 指控请求
- `HintRequest` - 提示请求

### 响应模型
- `GameSession` - 游戏会话信息
- `CharacterResponse` - 角色回答
- 流式响应使用Server-Sent Events格式

## 流式响应规范

### 对话流式响应
```
data: {"type": "start"}
data: {"type": "content", "content": "文字内容"}
data: {"type": "complete", "data": {...}}
```

### 指控流式响应
```
data: {"type": "step", "step": "defense", "title": "被告辩护"}
data: {"type": "defense_chunk", "content": "辩护内容"}
data: {"type": "defense_complete", "defense": "完整辩护"}
data: {"type": "verdict", "final_verdict": true}
```

## 错误处理规范

### HTTP状态码
- `200` - 成功
- `400` - 请求参数错误
- `404` - 资源不存在（如会话ID无效）
- `500` - 服务器内部错误

### 错误响应格式
```json
{
  "detail": "错误描述信息"
}
```

## 会话管理

### 会话生命周期
1. `POST /api/game/start` 创建新会话
2. 使用session_id进行后续操作
3. `DELETE /api/game/{session_id}` 清理会话

### 会话状态
- 存储在内存中的 `game_sessions` 字典
- 包含游戏引擎实例和所有游戏状态
- 自动清理机制（可选实现）

## AI集成规范

### AI服务配置 (在 [backend/config.py](mdc:backend/config.py))
- OpenAI API密钥配置
- 模型选择和参数设置
- 温度参数控制创造性

### AI调用模式
- 同步调用：直接返回完整响应
- 流式调用：逐步返回内容块
- 错误重试：处理API调用失败

## 开发最佳实践

### 代码组织
- 所有API端点在 [backend/app.py](mdc:backend/app.py)
- 业务逻辑在对应的服务类中
- 数据模型统一在 [backend/models.py](mdc:backend/models.py)

### 日志记录
- 使用Python logging模块
- 记录关键操作和错误信息
- 包含会话ID便于调试

### 异常处理
- 使用FastAPI的HTTPException
- 提供有意义的错误信息
- 避免暴露内部实现细节

### 性能优化
- 合理使用异步操作
- 避免阻塞操作
- 实现适当的缓存机制

## 测试和调试

### API文档
- 自动生成的Swagger文档：`http://localhost:8000/docs`
- 包含所有端点的详细说明和示例

### 测试工具
- 使用curl或Postman测试API
- 浏览器开发者工具测试WebSocket
- 单元测试覆盖关键业务逻辑

### 调试技巧
- 启用DEBUG模式查看详细日志
- 使用FastAPI的自动重载功能
- 监控内存使用和会话数量

## 扩展指南

### 添加新端点
1. 在 [backend/app.py](mdc:backend/app.py) 中定义路由
2. 创建对应的请求/响应模型
3. 实现业务逻辑
4. 添加错误处理和日志记录
5. 更新API文档

### 修改现有端点
1. 保持向后兼容性
2. 更新数据模型版本
3. 测试所有相关功能
4. 更新前端调用代码

### WebSocket功能扩展
1. 在WebSocket处理函数中添加新消息类型
2. 实现对应的业务逻辑
3. 更新前端WebSocket客户端
4. 测试实时通信功能
