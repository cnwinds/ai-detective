---
description: 
globs: 
alwaysApply: false
---
# 🎨 AI侦探游戏主题色规范

## 📋 规范概述

本文档规定了AI侦探游戏项目的主题色系统规范，确保在不同主题（浅色/深色）和设备（桌面/移动）之间保持一致的视觉体验。

### 📅 版本信息
- **创建日期**: 2025-06-26
- **版本**: v1.0.0
- **适用范围**: 前端所有UI组件
- **重构背景**: 解决select下拉框深色主题显示问题，建立完整主题色系统

## 🎯 设计原则

### 1. 主题适配性
- **强制要求**: 所有UI组件必须支持浅色和深色主题自动切换
- **禁止硬编码**: 严禁在CSS中使用硬编码颜色值（如 `#ffffff`, `rgba(255,255,255,0.1)`）
- **变量统一**: 所有颜色都通过CSS变量（`--theme-*`）定义和使用

### 2. 可访问性标准
- **对比度要求**: 文本与背景的对比度符合WCAG 2.1 AA标准（4.5:1）
- **深色主题**: 避免纯白色文字，使用柔和的浅色（如 `#f0f0f0`）
- **浅色主题**: 避免纯黑色文字，使用深灰色（如 `#333333`）

### 3. 视觉层次系统
- **透明度层次**: 使用15%、50%、100%透明度创建视觉层次
- **色彩重要性**: 主要内容使用主色调，次要内容使用次色调
- **功能区分**: 通过颜色深浅区分不同功能和状态

## 🎨 核心主题变量系统

### 基础色彩变量

```css
/* 主色调系统 */
--theme-primary-color: 主品牌色（金色系，用于强调和焦点）
--theme-secondary-color: 次要色彩（用于辅助元素）
--theme-accent-color: 强调色彩（用于悬停和激活状态）

/* 背景色系统 */
--theme-primary-bg: 主背景色（页面主要背景）
--theme-secondary-bg: 次要背景色（15%透明度，用于卡片和组件）
--theme-card-bg: 卡片背景色（用于弹窗和重要内容区域）
--theme-overlay-bg: 遮罩背景色（用于模态框背景）

/* 边框色系统 */
--theme-border-color: 主边框色（50%透明度，用于组件边框）
--theme-border-light: 浅色边框（用于分割线）
--theme-border-dark: 深色边框（用于强调边框）

/* 文字色系统 */
--theme-text-primary: 主要文字色（标题和重要内容）
--theme-text-secondary: 次要文字色（说明文字）
--theme-text-muted: 弱化文字色（辅助信息）
--theme-text-inverse: 反色文字（按钮文字等）
```

### 交互状态变量

```css
/* 交互状态色系 */
--theme-hover-bg: 悬停背景色（鼠标悬停时的背景）
--theme-active-bg: 激活背景色（点击激活时的背景）
--theme-focus-color: 焦点边框色（键盘导航焦点）

/* 功能状态色系 */
--theme-success-color: 成功状态色（绿色系）
--theme-warning-color: 警告状态色（黄色系）
--theme-error-color: 错误状态色（红色系）
--theme-info-color: 信息状态色（蓝色系）
```

## 🎭 角色色彩系统

### 角色类型颜色映射

游戏中不同角色类型使用特定的颜色标识，通过主题管理器自动生成：

```css
/* 角色背景色（15%透明度） */
--theme-character-victim-bg: 受害者背景色（通常为暖色调）
--theme-character-suspect-bg: 嫌疑人背景色（通常为红色调）
--theme-character-witness-bg: 证人背景色（通常为蓝色调）
--theme-character-expert-bg: 专家背景色（通常为绿色调）
--theme-character-investigator-bg: 调查员背景色（通常为紫色调）

/* 角色边框色（50%透明度） */
--theme-character-victim-border: 受害者边框色
--theme-character-suspect-border: 嫌疑人边框色
--theme-character-witness-border: 证人边框色
--theme-character-expert-border: 专家边框色
--theme-character-investigator-border: 调查员边框色

/* 角色文字色（100%不透明） */
--theme-character-victim-color: 受害者文字色
--theme-character-suspect-color: 嫌疑人文字色
--theme-character-witness-color: 证人文字色
--theme-character-expert-color: 专家文字色
--theme-character-investigator-color: 调查员文字色
```

### 角色色彩生成规则

主题管理器的 `calculateCharacterVariants()` 方法自动为每个角色类型生成三种变体：

1. **背景色**: `基础色 + 15%透明度` - 用于角色卡片背景
2. **边框色**: `基础色 + 50%透明度` - 用于角色卡片边框
3. **文字色**: `基础色 + 100%不透明` - 用于角色类型标签文字

## 🛠️ 组件样式规范

### 1. 自定义下拉选择器

这是本次重构的核心组件，完全替代了原生 `<select>` 元素：

```css
/* 主体样式 */
.custom-select {
    background: var(--theme-secondary-bg);
    border: 2px solid var(--theme-border-color);
    color: var(--theme-text-primary);
    border-radius: 8px;
    padding: 10px 12px;
    cursor: pointer;
    transition: all 0.3s ease;
}

/* 焦点状态 */
.custom-select:focus {
    border-color: var(--theme-primary-color);
    box-shadow: 0 0 10px var(--theme-primary-color);
    outline: none;
}

/* 下拉框容器 */
.custom-select-dropdown {
    background: var(--theme-card-bg);
    backdrop-filter: blur(10px);
    border: 1px solid var(--theme-border-color);
    border-radius: 8px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
    max-height: 200px;
    overflow-y: auto;
}

/* 选项样式 */
.custom-select-option {
    padding: 10px 12px;
    color: var(--theme-text-primary);
    cursor: pointer;
    transition: background-color 0.2s ease;
}

.custom-select-option:hover {
    background: var(--theme-hover-bg);
}

.custom-select-option.selected {
    background: var(--theme-primary-color);
    color: var(--theme-text-inverse);
}
```

### 2. 角色项目卡片

游戏中角色显示的标准样式：

```css
.character-item {
    background: var(--theme-secondary-bg);
    border: 1px solid var(--theme-border-color);
    color: var(--theme-text-primary);
    border-radius: 12px;
    padding: 16px;
    transition: all 0.3s ease;
}

.character-item:hover {
    border-color: var(--theme-primary-color);
    box-shadow: 0 0 15px var(--theme-primary-color);
    transform: translateY(-2px);
}

.character-type-badge {
    background: var(--theme-character-{type}-bg);
    border: 1px solid var(--theme-character-{type}-border);
    color: var(--theme-character-{type}-color);
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 0.8em;
}
```

### 3. 表单元素标准

所有表单输入元素的统一样式：

```css
/* 输入框 */
.form-input {
    background: var(--theme-secondary-bg);
    border: 1px solid var(--theme-border-color);
    color: var(--theme-text-primary);
    border-radius: 6px;
    padding: 10px 12px;
}

.form-input:focus {
    border-color: var(--theme-primary-color);
    box-shadow: 0 0 5px var(--theme-primary-color);
    outline: none;
}

/* 按钮 */
.form-button {
    background: var(--theme-primary-color);
    color: var(--theme-text-inverse);
    border: none;
    border-radius: 6px;
    padding: 10px 16px;
    cursor: pointer;
    transition: all 0.3s ease;
}

.form-button:hover {
    background: var(--theme-accent-color);
    transform: translateY(-1px);
}

/* 文本区域 */
.form-textarea {
    background: var(--theme-secondary-bg);
    border: 1px solid var(--theme-border-color);
    color: var(--theme-text-primary);
    border-radius: 6px;
    padding: 12px;
    resize: vertical;
    min-height: 80px;
}
```

## 🔧 实施指南

### 1. 严格禁止的做法

❌ **绝对禁止使用硬编码颜色**：
```css
/* 错误示例 - 禁止使用 */
background: #ffffff;
color: rgba(255, 255, 255, 0.8);
border: 1px solid #cccccc;
background: rgba(255, 255, 255, 0.1);
box-shadow: 0 0 10px #ffd700;
```

❌ **禁止的原因**：
- 无法适配深色主题
- 破坏视觉一致性
- 维护困难
- 可访问性问题

### 2. 推荐的正确做法

✅ **正确使用主题变量**：
```css
/* 正确示例 - 推荐使用 */
background: var(--theme-primary-bg);
color: var(--theme-text-primary);
border: 1px solid var(--theme-border-color);
background: var(--theme-secondary-bg);
box-shadow: 0 0 10px var(--theme-primary-color);
```

✅ **优势**：
- 自动适配所有主题
- 统一的视觉体验
- 易于维护和更新
- 完美的可访问性

### 3. 新组件开发流程

开发新UI组件时必须遵循以下步骤：

1. **需求分析**：
   - 确定组件的视觉层次（主要/次要/辅助）
   - 识别需要的交互状态（默认/悬停/激活/禁用）
   - 考虑响应式需求（桌面/移动端差异）

2. **变量选择**：
   - 从现有主题变量中选择合适的颜色
   - 避免创建新变量，除非确实必要
   - 确保变量语义正确

3. **样式实现**：
   - 使用CSS变量而非硬编码值
   - 添加适当的过渡动画
   - 考虑键盘导航和可访问性

4. **测试验证**：
   - 在浅色主题下测试
   - 在深色主题下测试
   - 在移动端和桌面端测试
   - 验证对比度和可读性

5. **文档更新**：
   - 在本规范中记录新的使用模式
   - 更新组件库文档
   - 通知团队成员

### 4. 主题变量扩展流程

当确实需要新的主题变量时：

1. **需求确认**：
   - 确认现有变量无法满足需求
   - 评估新变量的通用性
   - 考虑变量的语义命名

2. **实现步骤**：
   - 在 `theme-manager.js` 的 `generateThemeVariables()` 中添加
   - 确保浅色和深色主题都有对应值
   - 测试新变量在所有主题下的效果

3. **文档维护**：
   - 更新本文档的变量列表
   - 添加使用示例和说明
   - 通知团队成员新变量的用途

## 📱 响应式适配规范

### 移动端特殊考虑

移动端需要特别注意触控友好性和屏幕空间利用：

```css
/* 移动端触控优化 */
@media (max-width: 768px) {
    .interactive-element {
        min-height: 44px; /* 苹果推荐的最小触控目标 */
        padding: 12px 16px;
        margin: 8px 0; /* 增加间距避免误触 */
    }
    
    .custom-select-dropdown {
        max-height: 50vh; /* 防止下拉框占满屏幕 */
        bottom: auto; /* 自动调整位置 */
    }
    
    .character-item {
        padding: 20px; /* 增大触控区域 */
        margin-bottom: 16px;
    }
}
```

### 桌面端增强效果

桌面端可以使用更丰富的交互效果：

```css
/* 桌面端悬停增强 */
@media (min-width: 769px) {
    .hover-enhanced:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 20px var(--theme-primary-color);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .character-item:hover {
        transform: scale(1.02);
        z-index: 10;
    }
}

/* 减少移动端动画以提升性能 */
@media (prefers-reduced-motion: reduce) {
    * {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
    }
}
```

## ✅ 开发检查清单

### 开发前检查 (Planning Phase)
- [ ] 确认设计稿中的颜色可以映射到现有主题变量
- [ ] 识别是否需要新增主题变量
- [ ] 考虑深色主题下的可读性和对比度
- [ ] 评估移动端和桌面端的差异需求
- [ ] 确认组件的可访问性要求

### 开发中检查 (Implementation Phase)
- [ ] 没有使用任何硬编码颜色值
- [ ] 所有颜色都通过CSS变量定义
- [ ] 添加了适当的过渡动画效果
- [ ] 实现了键盘导航支持（如适用）
- [ ] 考虑了触控设备的交互需求

### 开发后检查 (Testing Phase)
- [ ] 主题切换功能正常工作
- [ ] 浅色主题下显示正常
- [ ] 深色主题下显示正常
- [ ] 文字对比度符合可访问性标准
- [ ] 移动端和桌面端显示一致
- [ ] 交互状态（悬停、焦点、激活）正常
- [ ] 更新了相关文档和注释

### 发布前检查 (Release Phase)
- [ ] 代码已通过团队审查
- [ ] 在多种设备上测试通过
- [ ] 性能测试无明显影响
- [ ] 文档已同步更新
- [ ] 向团队成员说明了变更内容

## 🔍 常见问题和解决方案

### Q1: 为什么要禁用原生select元素？
**A**: 原生 `<select>` 元素的下拉选项样式支持极其有限，大多数浏览器不允许自定义 `<option>` 的背景色和文字色，导致深色主题下显示问题。

### Q2: 自定义下拉选择器的性能如何？
**A**: 我们的 `CustomSelect` 类经过优化，包括：
- 事件委托减少内存占用
- 虚拟滚动支持大量选项
- 及时的事件监听器清理
- 防抖处理避免过度渲染

### Q3: 如何确保新组件符合主题规范？
**A**: 遵循本文档的检查清单，特别注意：
- 只使用 `var(--theme-*)` 变量
- 在两种主题下测试
- 验证对比度和可读性

### Q4: 主题变量命名规则是什么？
**A**: 遵循 `--theme-{category}-{element}` 模式：
- `category`: primary, secondary, character, text, border 等
- `element`: color, bg, border 等

### Q5: 如何处理第三方组件的主题适配？
**A**: 
1. 优先寻找支持CSS变量的组件
2. 通过CSS覆盖样式使用主题变量
3. 必要时开发自定义组件替代

## 📊 主题系统技术实现

### 主题管理器核心功能

`theme-manager.js` 中的关键方法：

```javascript
// 生成主题变量
generateThemeVariables(theme, colors) {
    // 基础变量生成
    // 角色颜色变体计算
    // CSS变量注入
}

// 角色颜色变体计算
calculateCharacterVariants(baseColor) {
    return {
        bg: `${baseColor}26`,      // 15% 透明度
        border: `${baseColor}80`,  // 50% 透明度
        color: baseColor           // 100% 不透明
    };
}

// 主题切换
switchTheme(themeName) {
    // 更新CSS变量
    // 保存用户偏好
    // 触发重新渲染
}
```

### CSS变量注入机制

主题变量通过JavaScript动态注入到CSS中：

```javascript
// 将变量应用到根元素
Object.entries(variables).forEach(([key, value]) => {
    document.documentElement.style.setProperty(`--${key}`, value);
});
```

### 主题持久化

用户的主题选择会保存到localStorage：

```javascript
localStorage.setItem('theme', selectedTheme);
```

## 🔄 版本历史

### v1.0.0 (2024-12-26)
**重大更新**：建立完整主题色规范体系

**核心成果**：
- ✅ 解决了select下拉框深色主题显示问题
- ✅ 创建了CustomSelect自定义下拉选择器组件
- ✅ 建立了完整的主题变量系统
- ✅ 消除了所有硬编码颜色值
- ✅ 实现了角色色彩自动生成机制
- ✅ 完善了响应式适配规则

**技术亮点**：
- 🎨 统一的主题色彩管理系统
- 🔧 完全可控的自定义UI组件
- 📱 移动端和桌面端完美适配
- ♿ 符合WCAG 2.1 AA标准的可访问性
- 🚀 优秀的性能和用户体验

**影响范围**：
- 前端所有HTML文件（mobile.html, desktop.html, admin_history.html）
- 所有CSS文件（mobile.css, desktop.css）
- JavaScript核心文件（utils.js, mobile.js, desktop.js）
- 主题管理器（theme-manager.js）

## 📞 规范支持

### 问题反馈渠道
1. **规范理解问题**：查阅本文档相关章节
2. **实现技术问题**：检查 `theme-manager.js` 和相关CSS文件
3. **新需求建议**：在项目issue中提出并标记 `[主题规范]`
4. **紧急问题**：直接联系前端开发团队

### 持续改进
- 📝 **文档更新**：规范会随项目发展持续更新
- 🔄 **版本管理**：所有变更都会记录版本历史
- 🤝 **团队协作**：欢迎所有开发者提出改进建议
- 📊 **效果评估**：定期评估规范执行效果并优化

---

> 💡 **重要提醒**：本规范是确保项目视觉一致性和用户体验的基础，所有开发者都有责任遵循和维护。如果遇到规范无法解决的特殊情况，请及时提出讨论而不是绕过规范。
