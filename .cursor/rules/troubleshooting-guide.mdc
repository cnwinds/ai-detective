---
description: 
globs: 
alwaysApply: false
---
# 故障排除和部署指南

## 常见问题诊断

### 项目结构问题

#### 问题：模块导入失败
**症状**: `ModuleNotFoundError: No module named 'xxx'`
**排查步骤**:
1. 检查backend目录是否有`__init__.py`文件
2. 确认使用相对导入：`from .module_name import ClassName`
3. 验证启动脚本中的导入路径：`from backend.module_name import ClassName`
4. 检查Python路径设置和工作目录

#### 问题：包结构错误
**症状**: 导入成功但运行时出现属性错误
**排查步骤**:
1. 确认所有Python文件都在正确的目录中
2. 检查[backend/__init__.py](mdc:backend/__init__.py)文件存在
3. 验证相对导入路径的正确性
4. 重新启动Python解释器清除缓存

### 服务器启动问题

#### 问题：FastAPI服务器无法启动
**症状**: 运行`python start_game.py`时出现错误
**排查步骤**:
1. 检查Python版本 (需要3.7+)
2. 验证依赖安装: `pip install -r requirements.txt`
3. 检查端口占用: `netstat -an | findstr :8000`
4. 查看错误日志中的具体错误信息
5. 确认backend包结构正确

#### 问题：OpenAI API连接失败
**症状**: AI对话功能不工作，返回API错误
**排查步骤**:
1. 检查`.env`文件中的OPENAI_API_KEY
2. 验证API密钥有效性和余额
3. 检查网络连接和防火墙设置
4. 查看[backend/ai_service.py](mdc:backend/ai_service.py)中的错误处理
5. 确认[backend/config.py](mdc:backend/config.py)配置正确

### 前端问题诊断

#### 问题：页面无法加载或显示空白
**症状**: 浏览器显示空白页面或加载失败
**排查步骤**:
1. 打开浏览器开发者工具查看控制台错误
2. 检查网络标签页中的HTTP请求状态
3. 验证静态文件路径是否正确
4. 检查[frontend/desktop.html](mdc:frontend/desktop.html)中的资源引用
5. 确认FastAPI服务器正常运行

#### 问题：角色对话显示异常
**症状**: 切换角色时对话历史显示错误或重复
**排查步骤**:
1. 检查`conversationHistory`数组结构
2. 验证`showCharacterConversation()`方法逻辑
3. 查看浏览器控制台中的JavaScript错误
4. 确认角色ID和名称匹配正确
5. 检查会话状态管理

#### 问题：流式输出不工作
**症状**: AI回答不是逐字显示，而是一次性出现
**排查步骤**:
1. 检查浏览器是否支持Server-Sent Events
2. 验证流式API端点是否正常工作
3. 查看网络请求中的响应类型
4. 检查[frontend/static/js/desktop.js](mdc:frontend/static/js/desktop.js)中的流式处理逻辑

### WebSocket连接问题

#### 问题：实时通信失败
**症状**: 游戏状态不同步，WebSocket连接断开
**排查步骤**:
1. 检查WebSocket连接URL是否正确
2. 验证session_id是否有效
3. 查看服务器端WebSocket处理逻辑
4. 检查网络代理或防火墙设置
5. 监控连接重试机制

#### 问题：会话管理异常
**症状**: 游戏状态丢失或会话过期
**排查步骤**:
1. 检查会话ID生成和存储
2. 验证会话超时设置
3. 查看服务器内存中的会话管理
4. 检查浏览器本地存储

## 调试技巧

### 前端调试

#### JavaScript调试
```javascript
// 在关键位置添加调试信息
console.log('当前游戏状态:', this.gameState);
console.log('对话历史:', this.conversationHistory);
console.log('选中角色:', this.selectedCharacter);

// 使用断点调试
debugger; // 浏览器会在此处暂停执行

// 检查DOM元素状态
console.log('角色列表元素:', document.getElementById('character-list'));
console.log('对话区域:', document.getElementById('conversation-area'));

// 监控状态变化
const originalUpdateState = this.updateGameState;
this.updateGameState = function(newState) {
    console.log('状态更新前:', this.gameState);
    console.log('新状态:', newState);
    originalUpdateState.call(this, newState);
    console.log('状态更新后:', this.gameState);
};
```

#### 网络请求调试
```javascript
// 添加详细的请求日志
async askQuestion(question, character) {
    console.log('发送问题:', { question, character, sessionId: this.sessionId });
    
    try {
        const startTime = performance.now();
        
        const response = await fetch('/api/game/question', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                question, 
                character_name: character, 
                session_id: this.sessionId 
            })
        });
        
        const endTime = performance.now();
        console.log(`请求耗时: ${endTime - startTime}ms`);
        console.log('响应状态:', response.status, response.statusText);
        
        const result = await response.json();
        console.log('响应数据:', result);
        
        return result;
    } catch (error) {
        console.error('请求失败详情:', {
            error: error.message,
            stack: error.stack,
            url: '/api/game/question',
            method: 'POST'
        });
        throw error;
    }
}

// 流式响应调试
async handleStreamResponse(url, data) {
    console.log('开始流式请求:', { url, data });
    
    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const reader = response.body.getReader();
        const decoder = new TextDecoder();
        let chunkCount = 0;
        
        while (true) {
            const { done, value } = await reader.read();
            if (done) {
                console.log(`流式响应完成，共接收 ${chunkCount} 个数据块`);
                break;
            }
            
            chunkCount++;
            const chunk = decoder.decode(value);
            console.log(`接收数据块 ${chunkCount}:`, chunk);
            
            // 处理数据块...
        }
    } catch (error) {
        console.error('流式请求失败:', error);
        throw error;
    }
}
```

#### 性能调试
```javascript
// 性能测量
console.time('页面渲染时间');
this.renderGameScreen();
console.timeEnd('页面渲染时间');

// 内存使用监控
function checkMemoryUsage() {
    if (performance.memory) {
        console.log('内存使用情况:', {
            used: Math.round(performance.memory.usedJSHeapSize / 1048576) + ' MB',
            total: Math.round(performance.memory.totalJSHeapSize / 1048576) + ' MB',
            limit: Math.round(performance.memory.jsHeapSizeLimit / 1048576) + ' MB'
        });
    }
}

// 定期检查内存
setInterval(checkMemoryUsage, 30000); // 每30秒检查一次
```

### 后端调试

#### Python日志调试
```python
import logging
import traceback
from datetime import datetime

# 配置详细日志
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('game_debug.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# 函数调用跟踪装饰器
def trace_calls(func):
    @wraps(func)
    async def wrapper(*args, **kwargs):
        start_time = datetime.now()
        logger.debug(f"调用 {func.__name__}, 参数: args={args}, kwargs={kwargs}")
        
        try:
            result = await func(*args, **kwargs)
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            logger.debug(f"{func.__name__} 完成，耗时: {duration:.3f}s")
            return result
        except Exception as e:
            logger.error(f"{func.__name__} 异常: {str(e)}")
            logger.error(f"堆栈跟踪: {traceback.format_exc()}")
            raise
    return wrapper

# 使用示例
@trace_calls
async def process_question(self, character_name: str, question: str):
    logger.debug(f"处理角色 {character_name} 的问题: {question}")
    # 业务逻辑...
```

#### 数据库调试
```python
# 数据库操作日志
import pymysql
from contextlib import contextmanager

@contextmanager
def debug_db_connection():
    connection = None
    try:
        connection = pymysql.connect(**db_config)
        logger.debug("数据库连接已建立")
        yield connection
    except Exception as e:
        logger.error(f"数据库操作失败: {str(e)}")
        if connection:
            connection.rollback()
        raise
    finally:
        if connection:
            connection.close()
            logger.debug("数据库连接已关闭")

# 使用示例
async def save_game_record(game_data):
    with debug_db_connection() as conn:
        cursor = conn.cursor()
        
        sql = "INSERT INTO game_records (...) VALUES (...)"
        logger.debug(f"执行SQL: {sql}")
        logger.debug(f"参数: {game_data}")
        
        cursor.execute(sql, game_data)
        conn.commit()
        
        logger.debug(f"插入记录ID: {cursor.lastrowid}")
```

## 部署指南

### 开发环境部署

#### 本地开发设置
```bash
# 1. 克隆项目
git clone <repository_url>
cd ai-detective

# 2. 创建虚拟环境
python -m venv venv
source venv/bin/activate  # Linux/macOS
# 或
venv\Scripts\activate     # Windows

# 3. 安装依赖
pip install -r requirements.txt

# 4. 配置环境变量
cp env.template .env
# 编辑 .env 文件，设置 OPENAI_API_KEY

# 5. 启动开发服务器
python start_game.py
```

#### 环境变量配置
```bash
# .env 文件示例
OPENAI_API_KEY=your_openai_api_key_here
OPENAI_BASE_URL=https://api.openai.com/v1
OPENAI_MODEL=gpt-3.5-turbo

# 数据库配置（可选）
DB_HOST=localhost
DB_PORT=3306
DB_USER=root
DB_PASSWORD=password
DB_NAME=detective_game

# 服务器配置
HOST=0.0.0.0
PORT=8000
DEBUG=true
```

### 生产环境部署

#### Docker部署
```bash
# 1. 构建Docker镜像
cd docker
docker-compose build

# 2. 启动服务
docker-compose up -d

# 3. 查看服务状态
docker-compose ps
docker-compose logs -f app
```

#### Docker Compose配置
```yaml
# docker/docker-compose.yml
version: '3.8'

services:
  app:
    build: .
    ports:
      - "8000:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - DB_NAME=detective_game
    depends_on:
      - mysql
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  mysql:
    image: mysql:5.7
    environment:
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=detective_game
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3306:3306"
    restart: unless-stopped

volumes:
  mysql_data:
```

#### Nginx反向代理配置
```nginx
# /etc/nginx/sites-available/detective-game
server {
    listen 80;
    server_name your-domain.com;

    # 静态文件
    location /static/ {
        alias /path/to/ai-detective/frontend/static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # API请求
    location /api/ {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # WebSocket连接
    location /ws/ {
        proxy_pass http://127.0.0.1:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    # 主页面
    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
```

#### SSL配置 (Let's Encrypt)
```bash
# 安装Certbot
sudo apt install certbot python3-certbot-nginx

# 获取SSL证书
sudo certbot --nginx -d your-domain.com

# 自动续期
sudo crontab -e
# 添加行：0 12 * * * /usr/bin/certbot renew --quiet
```

### 性能优化

#### 服务器性能优化
```python
# backend/config.py - 生产环境配置
import multiprocessing

class ProductionConfig:
    # Uvicorn配置
    HOST = "0.0.0.0"
    PORT = 8000
    WORKERS = multiprocessing.cpu_count() * 2 + 1
    
    # 数据库连接池
    DB_POOL_SIZE = 20
    DB_MAX_OVERFLOW = 30
    DB_POOL_RECYCLE = 3600
    
    # 缓存配置
    REDIS_URL = "redis://localhost:6379/0"
    CACHE_TTL = 300
    
    # 日志配置
    LOG_LEVEL = "INFO"
    LOG_FILE = "/app/logs/app.log"
    LOG_MAX_SIZE = "100MB"
    LOG_BACKUP_COUNT = 5

# 启动脚本优化
if __name__ == "__main__":
    import uvicorn
    
    uvicorn.run(
        "backend.app:app",
        host=config.HOST,
        port=config.PORT,
        workers=config.WORKERS,
        log_level=config.LOG_LEVEL.lower(),
        access_log=True,
        use_colors=False
    )
```

#### 前端性能优化
```javascript
// 资源预加载
const preloadResources = () => {
    // 预加载关键CSS
    const criticalCSS = document.createElement('link');
    criticalCSS.rel = 'preload';
    criticalCSS.as = 'style';
    criticalCSS.href = '/static/css/desktop.css';
    document.head.appendChild(criticalCSS);
    
    // 预加载字体
    const font = document.createElement('link');
    font.rel = 'preload';
    font.as = 'font';
    font.type = 'font/woff2';
    font.href = '/static/fonts/main.woff2';
    font.crossOrigin = 'anonymous';
    document.head.appendChild(font);
};

// 图片懒加载
const lazyLoadImages = () => {
    const images = document.querySelectorAll('img[data-src]');
    const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const img = entry.target;
                img.src = img.dataset.src;
                img.removeAttribute('data-src');
                observer.unobserve(img);
            }
        });
    });
    
    images.forEach(img => imageObserver.observe(img));
};

// 服务工作者缓存
if ('serviceWorker' in navigator) {
    navigator.serviceWorker.register('/sw.js').then(registration => {
        console.log('SW注册成功:', registration);
    }).catch(error => {
        console.log('SW注册失败:', error);
    });
}
```

### 监控和日志

#### 应用监控
```python
# 健康检查端点
@app.get("/health")
async def health_check():
    try:
        # 检查数据库连接
        db_status = await check_database_connection()
        
        # 检查AI服务
        ai_status = await check_ai_service()
        
        # 检查内存使用
        memory_usage = get_memory_usage()
        
        return {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "checks": {
                "database": db_status,
                "ai_service": ai_status,
                "memory_usage": memory_usage
            }
        }
    except Exception as e:
        return {
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

# 性能监控中间件
@app.middleware("http")
async def performance_middleware(request: Request, call_next):
    start_time = time.time()
    
    response = await call_next(request)
    
    process_time = time.time() - start_time
    response.headers["X-Process-Time"] = str(process_time)
    
    # 记录慢请求
    if process_time > 1.0:
        logger.warning(f"慢请求: {request.url} 耗时 {process_time:.2f}s")
    
    return response
```

#### 错误监控
```python
# 全局异常处理
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    logger.error(f"未处理异常: {str(exc)}", exc_info=True)
    
    # 发送错误通知（可选）
    await send_error_notification(exc, request)
    
    return JSONResponse(
        status_code=500,
        content={
            "success": False,
            "error": "服务器内部错误",
            "error_id": str(uuid.uuid4())
        }
    )

# 错误通知
async def send_error_notification(exc: Exception, request: Request):
    error_data = {
        "error": str(exc),
        "url": str(request.url),
        "method": request.method,
        "timestamp": datetime.now().isoformat(),
        "user_agent": request.headers.get("user-agent"),
        "ip": request.client.host
    }
    
    # 这里可以集成邮件、Slack、钉钉等通知服务
    logger.error(f"错误通知: {error_data}")
```

### 备份和恢复

#### 数据库备份
```bash
#!/bin/bash
# docker/backup-database.sh

BACKUP_DIR="/backups"
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_FILE="detective_game_backup_${DATE}.sql"

# 创建备份目录
mkdir -p $BACKUP_DIR

# 备份数据库
docker exec mysql_container mysqldump -u root -p$MYSQL_PASSWORD detective_game > $BACKUP_DIR/$BACKUP_FILE

# 压缩备份文件
gzip $BACKUP_DIR/$BACKUP_FILE

# 删除7天前的备份
find $BACKUP_DIR -name "*.gz" -mtime +7 -delete

echo "数据库备份完成: $BACKUP_FILE.gz"
```

#### 数据恢复
```bash
#!/bin/bash
# docker/restore-database.sh

if [ -z "$1" ]; then
    echo "用法: $0 <备份文件>"
    exit 1
fi

BACKUP_FILE=$1

# 解压备份文件
if [[ $BACKUP_FILE == *.gz ]]; then
    gunzip $BACKUP_FILE
    BACKUP_FILE=${BACKUP_FILE%.gz}
fi

# 恢复数据库
docker exec -i mysql_container mysql -u root -p$MYSQL_PASSWORD detective_game < $BACKUP_FILE

echo "数据库恢复完成"
```

这个综合指南涵盖了从开发到生产部署的完整流程，以及常见问题的解决方案和性能优化建议。





